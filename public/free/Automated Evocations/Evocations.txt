A user interface to manage companions with summoning animations and
automated summoning for spells

-   The Companion Manager works on all Systems, while the automations
    only work on DnD5e, PF2E. To configure automations on other systems
    check `Manually invoking the companion manger on spell cast`
-   For the summoning to work you need the actors imported in your world
    and your players need world level permission to create tokens. For
    the special spells\actor you can import eveything from both the
    actor and macro compendiums of Automated Evocations
-   While not a Dependency, Advanced Macros is required for the custom
    summons

## How to use

### Companion Manager

![Companion manger button](Aeheaderbtn.png "Companion manger button")
Open any character sheet, in the header of the window you will see the
companions button ![Companion Manager
Window](Companionmanager.png "Companion Manager Window") Upon opening
you will be welcomed by a window, from here you can drag and drop actor
into it to add them.

After adding actor to the window you will have some options:

-   To summon click on the actor image, you will get a placement
    croshair, just click where you want to summon the token
-   The number field represents how many tokens you will spawn
-   The dropdown will let you chose the summoning animation

### Store companions on actor

By default companions are stored per user (so each actor will have the
same summon list).

You can set per actor storage in the module settings if you want each
different actor to have it's own companion list.

### Advanced

If you want a particular actor to have it's own summon list you can use
the included macro to switch the actor from global storage to local (on
the actor). Simply place a linked actor on the scene, select it and run
the macro. Using the other macro to switch it to global again will not
wipe the saved companions so setting it to local at a later date will
restore the previous list.

For more advanced users you can set the flag with the following command
: `actor.setFlag(AECONSTS.MN,"isLocal", false)` (set true\false to
enable disable local storage)

## Custom Macros

The [Advanced
Marco](https://github.com/League-of-Foundry-Developers/fvtt-advanced-macros)
module is required for custom macros.

You can assign custom macros to specific actors

1.  Create a macro with this exact name `AE_Companion_Macro(ActorName)`
    eg. `AE_Companion_Macro(Bat)`, this will get fired any time a
    creature with that name is summoned
2.  Add code for the custom data, in the context of the macro `args[0]`
    contains the following data:

`summon`: the actor that's getting summoned

`spellLevel`: the level of the spell that triggered the summoning

`duplicates`: how many creatures are getting summoned

`assignedActor`: the actor assigned to the player doing the summoning
(this will be the selected token actor if no assigned actor is found,
this is always the case for GMs)

The macro must return the custom data.

You can use the `getSummonInfo` API call
(`CompanionManager.api.getSummonInfo`), passing in `args` and the base
spell level, to get the following information automatically calculated
for you:

-   `level`: how many levels above the base spell level the spell as
    cast at
-   `maxHP`: the actor's max HP
-   `modifier`: the actor's spellcasting ability modifier
-   `dc`: the actor's spellcasting DC
-   `attack.ms`: the melee spell attack bonus of the actor
-   `attack.rs`: the ranged spell attack bonus of the actor

Example (Flaming Sphere auto scaling)

Macro name: `AE_Companion_Macro(Flaming Sphere)`

`const summon = CompanionManager.api.getSummonInfo(args, 2);`  
`const flamingSphere = {`  
``   sphere: [`${summon.level + 2}d6`, 'fire'], ``  
`}`  
`return {`  
`  embedded: {`  
`    Item: {`  
`      "Flaming Sphere": {`  
``         "data.description.value": `Any creature that ends its turn within 5 feet of the sphere, or has the sphere rammed into it, must make a Dexterity saving throw (DC ${summon.dc}). The creature takes ${flamingSphere.sphere[0]} ${flamingSphere.sphere[1]} damage on a failed save, or half as much damage on a successful one.`, ``  
`        "data.save.dc": summon.dc,`  
`        "data.damage.parts":[flamingSphere.sphere]`  
`      }`  
`    }`  
`  }`  
`}`

Every time an actor named `Arcane Hand` is summoned, the custom data
will be applied

### Supported Spells

To use the included automations you will need to import both the Actor
and the corresponding Macro from Automated Evocation compendiums! (these
also require the module Advanced Macros for the autoscaling to work)

The ever expanding list of spells currently includes: All the SRD spells
for dnd5e, if something is missing let me know

### Custom and non-SRD spells

![Custom Bindings
Setting](Aecustombindingmenu.png "Custom Bindings Setting") ![Configure
Bindings Menu](Aeconfigbindmenu.png "Configure Bindings Menu") To add
your custom spell bindings use the Custom Bindings setting in the module
settings.

-   Open the `Configure Custom Bindings` menu
-   Click `Add Binding`
-   Rename the binding with the name of the spell or feature you want to
    bind by clicking on the name. This is `Case Sensitive`
-   Click the `Edit` button
-   A new window will open where you can configure this Binding
-   Click the `Add Binding` button to add a new creature
-   Edit the creature name to match the creature. This is
    `Case Sensitive`
-   Edit the number to summon and the animation.
-   Close the windows.

### Custom Animations

To add your own animations, you can merge your own configs to the
default one. Once you built the object you wanna merge, simply save it
to the hidden game setting
`game.settings.set(AECONSTS.MN, "customanimations", yourData)`

WARNING: Setting this hidden setting will override any previous value,
so you want to keep a file with all you custom setting and add to it
every time you want to apply it!

Example:

Adding your animation to the list:

`const customanims = {`  
`  energy2: {`  
`    fn: "light2",`  
`    time: 650,`  
`    name: "Energy 2",`  
`    group: "My Group" //optional`  
`  },`  
`};`  
  
`game.settings.set(AECONSTS.MN, "customanimations", customanims);`

`fn`: name of the macro to fire `time`: how long to wait from the
animation start before spwaning the token `name`: the displayed name

Example macro:

`const template = args[0]`  
`const tokenData = args[1]`  
`await new Sequence()`  
`.effect()`  
`    .file("modules/automated-evocations/assets/animations/energy_spark_CIRCLE_01.webm")`  
`    .belowTokens()`  
`    .randomRotation()`  
`    .atLocation(template)`  
`    .randomOffset()`  
`    .repeats(6, 50, 25, 75, 60, 20)`  
`    .scale(Math.max(tokenData.width,tokenData.height)*tokenData.scale*0.15)`  
`.wait(500)`  
`.effect()`  
`    .file("modules/automated-evocations/assets/animations/energy_pulse_yellow_CIRCLE.webm")`  
`    .belowTokens()`  
`    .atLocation(template)`  
`    .scale(Math.max(tokenData.width,tokenData.height)*tokenData.scale*0.35)`  
`.play()`

### Manually invoking the companion manger on spell cast

If you are on non DND5E systems you can trigger the companion manager
for specific spells with a macro or the module Item Macro

`new SimpleCompanionManager([`  
`  {`  
`    id: "actorid", //id of the actor to summon, if you have the name use game.actors.getName(name).id`  
`    animation: "animationid",//id of the animation - set to undefined for default`  
`    number: 1,//number of creatures to spawn`  
`  },`  
`  {`  
`    id: "actorid",`  
`    animation: "animationid",`  
`    number: 1,`  
`  }`  
`], spellLevel, actor); //spell level is the spell level of the spell that summons the companions (will be passed to the companion macro), actor is the actor that summons the companions`

## Credits

### PF2E Support

TomChristoffer#6777

### Jack Kerouac's

The Fire, Air, Lightning, Water, Energy, Magic, Heart, Crescendo, Four
Elements animations assets are from Jack Kerouac's amazing [Animated
Spell Effects:
Cartoon](https://github.com/jackkerouac/animated-spell-effects-cartoon)
module with his permission.

### JB2A

The Chord, Darkness, Ice, Conjuration, and Storm animations assets are
courtesy of JB2A with their permission.

Check out their [patreon](https://www.patreon.com/JB2A) and
[discord](https://discord.gg/A59GAZwB9M) for many more amazing
animations and variations.

### [Sequencer](https://github.com/fantasycalendar/FoundryVTT-Sequencer)

This module is used to play the animations

### [Warpgate](https://github.com/trioderegion/warpgate)

Warpgate is used for spawning.

### [Game Icons](https://game-icons.net/)

Some images used are from Games Icons.

[Category: Module](Category:_Module "wikilink") [Category:
Free](Category:_Free "wikilink")
